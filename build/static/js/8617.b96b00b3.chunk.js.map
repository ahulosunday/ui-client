{"version":3,"file":"static/js/8617.b96b00b3.chunk.js","mappings":"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","sources":["helpers/paging_indexes.js","pages/country/list.jsx"],"sourcesContent":["\r\nexport const startIndex = 1;\r\nexport const per_page = 30;\r\n//1692950350","import app from '../../helpers/axiosConfig'\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\n//import { AuthContext } from \"../../context/authContext\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport {AuthContext} from \"../../context/authContext\";\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport showToastMessage from '../../components/toast';\r\nimport { Pagination, Stack } from '@mui/material';\r\nimport { per_page, startIndex } from '../../helpers/paging_indexes';\r\nimport {\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardImage,\r\n  CCardText,\r\n  CCardTitle,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableCaption,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { DocsExample } from '../../components'\r\n\r\nconst ListCountry = () =>{\r\n       const [country, setCountry] = useState([]);\r\n        const [page, setPage] = React.useState(1);\r\n        const [data, setData] = useState([]);\r\n   const {currentUser, permissions } = useContext(AuthContext);\r\n   const navigate = useNavigate()\r\n   const [canAdd, setcanAdd]= useState(false)\r\n   \r\nuseEffect(()=>{\r\n    if(!(permissions.indexOf(\"VIEW_COUNTRY\") > -1) ){\r\n        navigate('/')\r\n    }\r\n\r\n    const load = e =>{\r\n    if(permissions.indexOf(\"ADD_COUNTRY\") > -1){\r\n      setcanAdd(true) \r\n    }\r\n    }\r\n    load()\r\n\r\nconst loadItem = async e =>{\r\n try{\r\n     await app.get(`/country/${startIndex}/${per_page}`)\r\n     .then(res =>{\r\n        setCountry(res.data.res)\r\n        setData(res.data)\r\n        \r\n     })\r\n     .catch(err=>{\r\n        showToastMessage('Error occured while trying to load data! :' + err, 'error')\r\n     })  \r\n    }catch(err){\r\n         showToastMessage('Error occured, reason: ' +err, 'error')\r\n        }\r\n        \r\n    }\r\n  loadItem();\r\n         //===============================\r\n\r\n  }, [currentUser, permissions, navigate])\r\n const handleChange = async (e, value) => {\r\n    setPage(value);\r\n    try{\r\n     await app.get(`/country/${page}/${per_page}`)\r\n     .then(res =>{\r\n        setCountry(res.data.res)\r\n        setData(res.data)\r\n     })\r\n     .catch(err=>{\r\n        showToastMessage('Error occured while trying to load data !'+err, 'error')\r\n     }) \r\n    }catch(err){\r\n        showToastMessage('Error occured, reason: ' +err, 'error')\r\n        }\r\n\r\n }\r\n    \r\n    return (\r\n           <CRow >\r\n<CCol xs={12} >\r\n        <CCard className=\"mb-12\" >\r\n         <CCardHeader style={{backgroundColor:'skyblue'}}>\r\n            <strong style={{color:'white'}}>LIST OF COUNTRIES</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <p className=\"text-medium-emphasis small\">\r\n              Using the Add New button to create new Country.\r\n            </p>\r\n           \r\n            <DocsExample href=\"country/add\" add=\"Country List\" showAdd={canAdd}></DocsExample>\r\n       <CTable striped style={{fontSize:'12px'}} align=\"middle\" responsive>\r\n       <CTableHead>\r\n       <CTableRow >\r\n       <CTableHeaderCell>COUNTRY</CTableHeaderCell>\r\n        <CTableHeaderCell>SHORTNAME</CTableHeaderCell>\r\n       <CTableHeaderCell>CODE</CTableHeaderCell>\r\n       <CTableHeaderCell>CURRENCY</CTableHeaderCell>\r\n       <CTableHeaderCell>EDITEDBY</CTableHeaderCell>\r\n       <CTableHeaderCell>CREATED_DATE</CTableHeaderCell>\r\n       <CTableHeaderCell>LAST_UPDATED</CTableHeaderCell>\r\n       <CTableHeaderCell></CTableHeaderCell>\r\n       </CTableRow>\r\n       </CTableHead>\r\n       <CTableBody>\r\n       {\r\n        \r\n         country.length===0? '': country.map((item)=>(\r\n            <CTableRow key={item.id}>\r\n       <CTableHeaderCell>{item.name}</CTableHeaderCell>\r\n       <CTableHeaderCell>{item.shortname}</CTableHeaderCell>\r\n        <CTableHeaderCell>{item.code}</CTableHeaderCell>\r\n        <CTableHeaderCell>{item.currency}</CTableHeaderCell>\r\n        <CTableHeaderCell>{item.user.surname + ' ' + item.user.othername}</CTableHeaderCell>\r\n        <CTableHeaderCell>{item.createdAt}</CTableHeaderCell>\r\n        <CTableHeaderCell>{item.updatedAt}</CTableHeaderCell>\r\n       <CTableHeaderCell>\r\n        <CButtonGroup >\r\n      {permissions.indexOf(\"EDIT_COUNTRY\") > -1? <CButton color=\"secondary\" size=\"sm\" ><Link to={`/0/country/`} state={item.id} className=\"edit\" style={{color:'white', textDecoration:'none'}}> Edit</Link></CButton>:'' }\r\n       {permissions.indexOf(\"DELETE_COUNTRY\") > -1? <CButton color=\"danger\" size=\"sm\" ><Link to={'/delete'}  state={item.id +'&/country&/country/'} className=\"delete\" style={{color:'white', textDecoration:'none'}}>Delete</Link></CButton> : ''}\r\n       </CButtonGroup>\r\n        </CTableHeaderCell>\r\n       </CTableRow>\r\n            ))\r\n           \r\n        }\r\n      </CTableBody>\r\n       </CTable>\r\n       <p>\r\n       <Stack spacing={2}>\r\n      <Pagination count={data.totalPages} page={page} onChange={handleChange} variant=\"outlined\" shape=\"rounded\"  color=\"secondary\" />\r\n    </Stack>\r\n       </p>\r\n      </CCardBody>\r\n      </CCard>\r\n      </CCol>\r\n      </CRow>\r\n      \r\n        \r\n        \r\n       \r\n       \r\n    )\r\n}\r\n\r\nexport default ListCountry;"],"names":["startIndex","per_page","_useState","useState","_useState2","_slicedToArray","country","setCountry","_React$useState","React","_React$useState2","page","setPage","_useState3","_useState4","data","setData","_useContext","useContext","AuthContext","currentUser","permissions","navigate","useNavigate","_useState5","_useState6","canAdd","setcanAdd","useEffect","indexOf","loadItem","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","app","get","concat","then","res","catch","err","showToastMessage","t0","stop","_x","apply","arguments","handleChange","_ref2","_callee2","value","_context2","_x2","_x3","_jsx","CRow","children","CCol","xs","_jsxs","CCard","className","CCardHeader","style","backgroundColor","color","CCardBody","DocsExample","href","add","showAdd","CTable","striped","fontSize","align","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","length","map","item","name","shortname","code","currency","user","surname","othername","createdAt","updatedAt","CButtonGroup","CButton","size","Link","to","state","id","textDecoration","Stack","spacing","Pagination","count","totalPages","onChange","variant","shape"],"sourceRoot":""}