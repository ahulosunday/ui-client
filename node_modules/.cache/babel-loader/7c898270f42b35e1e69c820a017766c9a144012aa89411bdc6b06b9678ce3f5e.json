{"ast":null,"code":"import get from \"lodash/get\";\nimport axios from \"axios\";\n\n// the baseURL should to point to localhost in development\n// and your domain in production\n//const axiosCreate = async ()=>{\nvar app = await axios.create({\n  //baseURL: \"http://localhost:6001/api/auth/\"\n  baseURL: \"https://api-lky4.onrender.com/api/auth/\"\n});\n\n// axios consumes rejected API responses by default,\n// so the configuration below intercepts the those\n// responses and passes them down to the function that\n// uses our custom \"app\" axios configuration.\napp.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  var err = get(error, [\"response\", \"data\", \"err\"]);\n\n  // \"err\" refers to the response returned from the API when\n  // a response is rejected. \"err\" can be named anything, but it\n  // must be consistent across all your API routes (for example, see\n  // anarchive/routes/api => verify route => \"catch\" sends the \"err\")\n  return Promise.reject(err ? err : error.message);\n});\n//}\n\nexport default app;","map":{"version":3,"names":["get","axios","app","create","baseURL","interceptors","response","use","error","err","Promise","reject","message"],"sources":["C:/e-NHIA/ui-client/src/helpers/axiosConfig.js"],"sourcesContent":["import get from \"lodash/get\";\r\nimport axios from \"axios\";\r\n\r\n// the baseURL should to point to localhost in development\r\n// and your domain in production\r\n//const axiosCreate = async ()=>{\r\nconst app = await axios.create({ \r\n    //baseURL: \"http://localhost:6001/api/auth/\"\r\n    baseURL: \"https://api-lky4.onrender.com/api/auth/\"\r\n});\r\n\r\n// axios consumes rejected API responses by default,\r\n// so the configuration below intercepts the those\r\n// responses and passes them down to the function that\r\n// uses our custom \"app\" axios configuration.\r\napp.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    const err = get(error, [\"response\", \"data\", \"err\"]);\r\n\r\n    // \"err\" refers to the response returned from the API when\r\n    // a response is rejected. \"err\" can be named anything, but it\r\n    // must be consistent across all your API routes (for example, see\r\n    // anarchive/routes/api => verify route => \"catch\" sends the \"err\")\r\n    return Promise.reject(err ? err : error.message);\r\n  }\r\n);\r\n//}\r\n\r\n\r\nexport default app;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,IAAMC,GAAG,GAAG,MAAMD,KAAK,CAACE,MAAM,CAAC;EAC3B;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAF,GAAG,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3B,UAAAD,QAAQ;EAAA,OAAIA,QAAQ;AAAA,GACpB,UAAAE,KAAK,EAAI;EACP,IAAMC,GAAG,GAAGT,GAAG,CAACQ,KAAK,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;;EAEnD;EACA;EACA;EACA;EACA,OAAOE,OAAO,CAACC,MAAM,CAACF,GAAG,GAAGA,GAAG,GAAGD,KAAK,CAACI,OAAO,CAAC;AAClD,CACF,CAAC;AACD;;AAGA,eAAeV,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}